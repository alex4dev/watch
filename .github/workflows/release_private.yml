name: Test Builds (Build and Deploy APK)

env:
  # The name of the main module repository
  main_project_module: app


on:

  push:
    branches:
      - 'release/**'

  # Allows you to run this workflows manually from the Actions tab
  workflow_dispatch:
    inputs:
      name:
        description: "Release-Build"
        default: "Generate release build for tests"
      testers:
        type: choice
        description: "Select testers"
        options:
          - internal
          - all

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      # Set Current Date As Env Variable
      #      - name: Set current date as env variable
      #        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      #      - name: Set repository name as env variable
      #        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Determine Tester Group
        id: determine_testers
        run: |
          if (-not $env:GITHUB_EVENT_INPUT_TESTERS) {
            echo "testers=internal" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "testers=$env:GITHUB_EVENT_INPUT_TESTERS" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        shell: powershell

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'
          cache: 'gradle'

      #      - name: Change wrapper permissions
      #        run: chmod +x ./gradlew

      # Run Tests Build
      - name: Run gradle tests
        run: ./gradlew test

      #      # Run Build Project
      #      - name: Build gradle project
      #        run: ./gradlew build

      # This will decode the keystore from base 64 text representation that we have stored in secrets
      # and generates and keystore file and gets stored in /android-app path
      - name: Decode Keystore (Ubuntu)
        if: runner.os == 'Linux'  # Run only on Ubuntu or Linux runners
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
        run: |
          echo "$ENCODED_STRING" | base64 --decode > keystore.jks

      - name: Decode Keystore (Windows)
        if: runner.os == 'Windows'  # Run only on Windows runners
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
        run: |
          [IO.File]::WriteAllBytes("keystore.jks", [Convert]::FromBase64String($env:ENCODED_STRING))


      # Create APK Release
      - name: Build signed release apk project (APK)
        if: runner.os == 'Windows'  # Run only on Windows runners
        run: |
          ./gradlew assembleRelease `
            -PkeyAlias="${{ secrets.KEYSTORE_ALIAS }}" `
            -PkeyPassword="${{ secrets.KEYSTORE_PASSWORD }}" `
            -PstoreFilePath="${{ github.workspace }}/keystore.jks" `
            -PstorePassword="${{ secrets.KEYSTORE_PASSWORD }}"


  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - name: Find APK file
        if: runner.os == 'Windows'  # Run only on Windows runners
        id: releaseApk
        run: |
          $apkfile = Get-ChildItem -Path app/build/outputs/apk/release -Filter *.apk | Select-Object -First 1
          # Check if the file exists and display the path in the logs
          if ($apkfile) {
            echo "Found APK: $($apkfile.FullName)"
            echo "apkfile=$($apkfile.FullName)" >> $env:GITHUB_OUTPUT
          } else {
            echo "No APK found in app/build/outputs/apk/release"
            exit 1
          }
        shell: powershell


      #      - name: Decode and save Firebase service account key
      #        env:
      #          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
      #        run: |
      #          echo $CREDENTIAL_FILE_CONTENT | base64 --decode > firebase-service-account-key.json
      - name: Decode and save Firebase service account key
        if: runner.os == 'Windows'  # Run only on Windows runners
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        run: |
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($env:FIREBASE_SERVICE_ACCOUNT_KEY)) | Out-File -FilePath firebase-service-account-key.json -Encoding utf8
        shell: powershell


      #      - name: Upload artifact to Firebase App Distribution
      #        uses: wzieba/Firebase-Distribution-Github-Action@v1
      #        with:
      #          appId: ${{secrets.FIREBASE_APP_ID}}
      #          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
      #          groups: testers
      #          file: ${{ steps.releaseApk.outputs.apkfile }}

      - name: Upload to Firebase App Distribution
        if: runner.os == 'Windows'  # Run only on Windows runners
        run: |
          ./gradlew appDistributionUploadRelease `
            -PfirebaseAppDistributionFile=${{ github.workspace }}/firebase-service-account-key.json `
            -PfirebaseAppDistributionGroups=${{ env.testers }} `
            -PapkFilePath=${{ steps.releaseApk.outputs.apkfile }}
        shell: powershell
